//go:build !ignore_autogenerated
// +build !ignore_autogenerated

// Code generated by iocli, run 'iocli gen' to re-generate

package bus_module

import (
	autowire "github.com/alibaba/ioc-golang/autowire"
	normal "github.com/alibaba/ioc-golang/autowire/normal"
	singleton "github.com/alibaba/ioc-golang/autowire/singleton"
	util "github.com/alibaba/ioc-golang/autowire/util"
)

func init() {
	normal.RegisterStructDescriptor(&autowire.StructDescriptor{
		Factory: func() interface{} {
			return &busModule_{}
		},
	})
	busModuleStructDescriptor := &autowire.StructDescriptor{
		Factory: func() interface{} {
			return &BusModule{}
		},
		ConstructFunc: func(i interface{}, _ interface{}) (interface{}, error) {
			impl := i.(*BusModule)
			var constructFunc BusModuleConstructFunc = NewBusModule
			return constructFunc(impl)
		},
		Metadata: map[string]interface{}{
			"aop":      map[string]interface{}{},
			"autowire": map[string]interface{}{},
		},
	}
	singleton.RegisterStructDescriptor(busModuleStructDescriptor)
}

type BusModuleConstructFunc func(impl *BusModule) (*BusModule, error)
type busModule_ struct {
}

type BusModuleIOCInterface interface {
}

var _busModuleSDID string

func GetBusModuleSingleton() (*BusModule, error) {
	if _busModuleSDID == "" {
		_busModuleSDID = util.GetSDIDByStructPtr(new(BusModule))
	}
	i, err := singleton.GetImpl(_busModuleSDID, nil)
	if err != nil {
		return nil, err
	}
	impl := i.(*BusModule)
	return impl, nil
}

func GetBusModuleIOCInterfaceSingleton() (BusModuleIOCInterface, error) {
	if _busModuleSDID == "" {
		_busModuleSDID = util.GetSDIDByStructPtr(new(BusModule))
	}
	i, err := singleton.GetImplWithProxy(_busModuleSDID, nil)
	if err != nil {
		return nil, err
	}
	impl := i.(BusModuleIOCInterface)
	return impl, nil
}

type ThisBusModule struct {
}

func (t *ThisBusModule) This() BusModuleIOCInterface {
	thisPtr, _ := GetBusModuleIOCInterfaceSingleton()
	return thisPtr
}
