//go:build !ignore_autogenerated
// +build !ignore_autogenerated

// Code generated by iocli, run 'iocli gen' to re-generate

package storage_module

import (
	autowire "github.com/alibaba/ioc-golang/autowire"
	normal "github.com/alibaba/ioc-golang/autowire/normal"
	singleton "github.com/alibaba/ioc-golang/autowire/singleton"
	util "github.com/alibaba/ioc-golang/autowire/util"
	v9 "github.com/redis/go-redis/v9"
	"gorm.io/gorm"
)

func init() {
	normal.RegisterStructDescriptor(&autowire.StructDescriptor{
		Factory: func() interface{} {
			return &storageModule_{}
		},
	})
	storageModuleStructDescriptor := &autowire.StructDescriptor{
		Factory: func() interface{} {
			return &StorageModule{}
		},
		ConstructFunc: func(i interface{}, _ interface{}) (interface{}, error) {
			impl := i.(*StorageModule)
			var constructFunc StorageModuleConstructFunc = NewStorageModule
			return constructFunc(impl)
		},
		Metadata: map[string]interface{}{
			"aop":      map[string]interface{}{},
			"autowire": map[string]interface{}{},
		},
	}
	singleton.RegisterStructDescriptor(storageModuleStructDescriptor)
}

type StorageModuleConstructFunc func(impl *StorageModule) (*StorageModule, error)
type storageModule_ struct {
	GetRedisConnection_ func() (*v9.Client, error)
	GetMysqlConnection_ func() (*gorm.DB, error)
}

func (s *storageModule_) GetRedisConnection() (*v9.Client, error) {
	return s.GetRedisConnection_()
}

func (s *storageModule_) GetMysqlConnection() (*gorm.DB, error) {
	return s.GetMysqlConnection_()
}

type StorageModuleIOCInterface interface {
	GetRedisConnection() (*v9.Client, error)
	GetMysqlConnection() (*gorm.DB, error)
}

var _storageModuleSDID string

func GetStorageModuleSingleton() (*StorageModule, error) {
	if _storageModuleSDID == "" {
		_storageModuleSDID = util.GetSDIDByStructPtr(new(StorageModule))
	}
	i, err := singleton.GetImpl(_storageModuleSDID, nil)
	if err != nil {
		return nil, err
	}
	impl := i.(*StorageModule)
	return impl, nil
}

func GetStorageModuleIOCInterfaceSingleton() (StorageModuleIOCInterface, error) {
	if _storageModuleSDID == "" {
		_storageModuleSDID = util.GetSDIDByStructPtr(new(StorageModule))
	}
	i, err := singleton.GetImplWithProxy(_storageModuleSDID, nil)
	if err != nil {
		return nil, err
	}
	impl := i.(StorageModuleIOCInterface)
	return impl, nil
}

type ThisStorageModule struct {
}

func (t *ThisStorageModule) This() StorageModuleIOCInterface {
	thisPtr, _ := GetStorageModuleIOCInterfaceSingleton()
	return thisPtr
}
