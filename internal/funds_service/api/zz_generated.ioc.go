//go:build !ignore_autogenerated
// +build !ignore_autogenerated

// Code generated by iocli, run 'iocli gen' to re-generate

package api

import (
	contextx "context"
	autowire "github.com/alibaba/ioc-golang/autowire"
	normal "github.com/alibaba/ioc-golang/autowire/normal"
	util "github.com/alibaba/ioc-golang/autowire/util"
	"google.golang.org/protobuf/types/known/emptypb"
)

func init() {
	normal.RegisterStructDescriptor(&autowire.StructDescriptor{
		Factory: func() interface{} {
			return &treasury_{}
		},
	})
	treasuryStructDescriptor := &autowire.StructDescriptor{
		Factory: func() interface{} {
			return &Treasury{}
		},
		Metadata: map[string]interface{}{
			"aop":      map[string]interface{}{},
			"autowire": map[string]interface{}{},
		},
	}
	normal.RegisterStructDescriptor(treasuryStructDescriptor)
}

type treasury_ struct {
	CreateChargeOrder_ func(ctx contextx.Context, request *emptypb.Empty) (*CreateChargeOrderResponse, error)
}

func (t *treasury_) CreateChargeOrder(ctx contextx.Context, request *emptypb.Empty) (*CreateChargeOrderResponse, error) {
	return t.CreateChargeOrder_(ctx, request)
}

type TreasuryIOCInterface interface {
	CreateChargeOrder(ctx contextx.Context, request *emptypb.Empty) (*CreateChargeOrderResponse, error)
}

var _treasurySDID string

func GetTreasury() (*Treasury, error) {
	if _treasurySDID == "" {
		_treasurySDID = util.GetSDIDByStructPtr(new(Treasury))
	}
	i, err := normal.GetImpl(_treasurySDID, nil)
	if err != nil {
		return nil, err
	}
	impl := i.(*Treasury)
	return impl, nil
}

func GetTreasuryIOCInterface() (TreasuryIOCInterface, error) {
	if _treasurySDID == "" {
		_treasurySDID = util.GetSDIDByStructPtr(new(Treasury))
	}
	i, err := normal.GetImplWithProxy(_treasurySDID, nil)
	if err != nil {
		return nil, err
	}
	impl := i.(TreasuryIOCInterface)
	return impl, nil
}
