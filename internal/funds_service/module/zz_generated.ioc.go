//go:build !ignore_autogenerated
// +build !ignore_autogenerated

// Code generated by iocli, run 'iocli gen' to re-generate

package model

import (
	autowire "github.com/alibaba/ioc-golang/autowire"
	normal "github.com/alibaba/ioc-golang/autowire/normal"
	util "github.com/alibaba/ioc-golang/autowire/util"
	v9 "github.com/redis/go-redis/v9"
	"gorm.io/gorm"
)

func init() {
	normal.RegisterStructDescriptor(&autowire.StructDescriptor{
		Factory: func() interface{} {
			return &storage_{}
		},
	})
	storageStructDescriptor := &autowire.StructDescriptor{
		Factory: func() interface{} {
			return &Storage{}
		},
		ConstructFunc: func(i interface{}, _ interface{}) (interface{}, error) {
			impl := i.(*Storage)
			var constructFunc StorageConstructFunc = NewStorage
			return constructFunc(impl)
		},
		Metadata: map[string]interface{}{
			"aop":      map[string]interface{}{},
			"autowire": map[string]interface{}{},
		},
	}
	normal.RegisterStructDescriptor(storageStructDescriptor)
}

type StorageConstructFunc func(impl *Storage) (*Storage, error)
type storage_ struct {
	GetRedisClient_ func(connectionString string) (*v9.Client, error)
	GetMysqlClient_ func(connectionString string) (*gorm.DB, error)
}

func (s *storage_) GetRedisClient(connectionString string) (*v9.Client, error) {
	return s.GetRedisClient_(connectionString)
}

func (s *storage_) GetMysqlClient(connectionString string) (*gorm.DB, error) {
	return s.GetMysqlClient_(connectionString)
}

type StorageIOCInterface interface {
	GetRedisClient(connectionString string) (*v9.Client, error)
	GetMysqlClient(connectionString string) (*gorm.DB, error)
}

var _storageSDID string

func GetStorage() (*Storage, error) {
	if _storageSDID == "" {
		_storageSDID = util.GetSDIDByStructPtr(new(Storage))
	}
	i, err := normal.GetImpl(_storageSDID, nil)
	if err != nil {
		return nil, err
	}
	impl := i.(*Storage)
	return impl, nil
}

func GetStorageIOCInterface() (StorageIOCInterface, error) {
	if _storageSDID == "" {
		_storageSDID = util.GetSDIDByStructPtr(new(Storage))
	}
	i, err := normal.GetImplWithProxy(_storageSDID, nil)
	if err != nil {
		return nil, err
	}
	impl := i.(StorageIOCInterface)
	return impl, nil
}
