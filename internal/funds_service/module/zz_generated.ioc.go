//go:build !ignore_autogenerated
// +build !ignore_autogenerated

// Code generated by iocli, run 'iocli gen' to re-generate

package module

import (
	contextx "context"
	"github.com/DwGoing/MarketBrain/internal/funds_service/module/config_generated"
	"github.com/DwGoing/MarketBrain/internal/funds_service/module/treasury_generated"
	"github.com/DwGoing/MarketBrain/pkg/enum"
	autowire "github.com/alibaba/ioc-golang/autowire"
	normal "github.com/alibaba/ioc-golang/autowire/normal"
	singleton "github.com/alibaba/ioc-golang/autowire/singleton"
	util "github.com/alibaba/ioc-golang/autowire/util"
	"github.com/gin-gonic/gin"
	v9 "github.com/redis/go-redis/v9"
	"google.golang.org/protobuf/types/known/emptypb"
	"gorm.io/gorm"
)

func init() {
	normal.RegisterStructDescriptor(&autowire.StructDescriptor{
		Factory: func() interface{} {
			return &chain_{}
		},
	})
	chainStructDescriptor := &autowire.StructDescriptor{
		Factory: func() interface{} {
			return &Chain{}
		},
		Metadata: map[string]interface{}{
			"aop":      map[string]interface{}{},
			"autowire": map[string]interface{}{},
		},
	}
	normal.RegisterStructDescriptor(chainStructDescriptor)
	normal.RegisterStructDescriptor(&autowire.StructDescriptor{
		Factory: func() interface{} {
			return &config_{}
		},
	})
	configStructDescriptor := &autowire.StructDescriptor{
		Factory: func() interface{} {
			return &Config{}
		},
		Metadata: map[string]interface{}{
			"aop":      map[string]interface{}{},
			"autowire": map[string]interface{}{},
		},
	}
	normal.RegisterStructDescriptor(configStructDescriptor)
	normal.RegisterStructDescriptor(&autowire.StructDescriptor{
		Factory: func() interface{} {
			return &eventBus_{}
		},
	})
	eventBusStructDescriptor := &autowire.StructDescriptor{
		Factory: func() interface{} {
			return &EventBus{}
		},
		ConstructFunc: func(i interface{}, _ interface{}) (interface{}, error) {
			impl := i.(*EventBus)
			var constructFunc EventBusConstructFunc = NewEventBus
			return constructFunc(impl)
		},
		Metadata: map[string]interface{}{
			"aop":      map[string]interface{}{},
			"autowire": map[string]interface{}{},
		},
	}
	singleton.RegisterStructDescriptor(eventBusStructDescriptor)
	normal.RegisterStructDescriptor(&autowire.StructDescriptor{
		Factory: func() interface{} {
			return &notify_{}
		},
	})
	notifyStructDescriptor := &autowire.StructDescriptor{
		Factory: func() interface{} {
			return &Notify{}
		},
		Metadata: map[string]interface{}{
			"aop":      map[string]interface{}{},
			"autowire": map[string]interface{}{},
		},
	}
	normal.RegisterStructDescriptor(notifyStructDescriptor)
	normal.RegisterStructDescriptor(&autowire.StructDescriptor{
		Factory: func() interface{} {
			return &storage_{}
		},
	})
	storageStructDescriptor := &autowire.StructDescriptor{
		Factory: func() interface{} {
			return &Storage{}
		},
		Metadata: map[string]interface{}{
			"aop":      map[string]interface{}{},
			"autowire": map[string]interface{}{},
		},
	}
	normal.RegisterStructDescriptor(storageStructDescriptor)
	normal.RegisterStructDescriptor(&autowire.StructDescriptor{
		Factory: func() interface{} {
			return &treasury_{}
		},
	})
	treasuryStructDescriptor := &autowire.StructDescriptor{
		Factory: func() interface{} {
			return &Treasury{}
		},
		Metadata: map[string]interface{}{
			"aop":      map[string]interface{}{},
			"autowire": map[string]interface{}{},
		},
	}
	normal.RegisterStructDescriptor(treasuryStructDescriptor)
}

type EventBusConstructFunc func(impl *EventBus) (*EventBus, error)
type chain_ struct {
	DecodeTransaction_ func(chainType enum.ChainType, txHash string) (bool, string, int64, string, float64, int64, error)
}

func (c *chain_) DecodeTransaction(chainType enum.ChainType, txHash string) (bool, string, int64, string, float64, int64, error) {
	return c.DecodeTransaction_(chainType, txHash)
}

type config_ struct {
	SetRpc_  func(ctx contextx.Context, request *config_generated.SetRequest) (*emptypb.Empty, error)
	SetApi_  func(ctx *gin.Context)
	Load_    func() (*Configs, error)
	LoadRpc_ func(ctx contextx.Context, request *emptypb.Empty) (*config_generated.LoadResponse, error)
	LoadApi_ func(ctx *gin.Context)
}

func (c *config_) SetRpc(ctx contextx.Context, request *config_generated.SetRequest) (*emptypb.Empty, error) {
	return c.SetRpc_(ctx, request)
}

func (c *config_) SetApi(ctx *gin.Context) {
	c.SetApi_(ctx)
}

func (c *config_) Load() (*Configs, error) {
	return c.Load_()
}

func (c *config_) LoadRpc(ctx contextx.Context, request *emptypb.Empty) (*config_generated.LoadResponse, error) {
	return c.LoadRpc_(ctx, request)
}

func (c *config_) LoadApi(ctx *gin.Context) {
	c.LoadApi_(ctx)
}

type eventBus_ struct {
}

type notify_ struct {
	Send_ func(url string, data any) error
}

func (n *notify_) Send(url string, data any) error {
	return n.Send_(url, data)
}

type storage_ struct {
	GetRedisClient_ func() (*v9.Client, error)
	GetMysqlClient_ func() (*gorm.DB, error)
}

func (s *storage_) GetRedisClient() (*v9.Client, error) {
	return s.GetRedisClient_()
}

func (s *storage_) GetMysqlClient() (*gorm.DB, error) {
	return s.GetMysqlClient_()
}

type treasury_ struct {
	CreateRechargeOrderRpc_            func(ctx contextx.Context, request *treasury_generated.CreateRechargeOrderRequest) (*treasury_generated.CreateRechargeOrderResponse, error)
	CreateRechargeOrderApi_            func(ctx *gin.Context)
	SubmitRechargeOrderTransactionRpc_ func(ctx contextx.Context, request *treasury_generated.SubmitRechargeOrderTransactionRequest) (*emptypb.Empty, error)
	SubmitRechargeOrderTransactionApi_ func(ctx *gin.Context)
	CheckRechargeOrderStatus_          func() error
}

func (t *treasury_) CreateRechargeOrderRpc(ctx contextx.Context, request *treasury_generated.CreateRechargeOrderRequest) (*treasury_generated.CreateRechargeOrderResponse, error) {
	return t.CreateRechargeOrderRpc_(ctx, request)
}

func (t *treasury_) CreateRechargeOrderApi(ctx *gin.Context) {
	t.CreateRechargeOrderApi_(ctx)
}

func (t *treasury_) SubmitRechargeOrderTransactionRpc(ctx contextx.Context, request *treasury_generated.SubmitRechargeOrderTransactionRequest) (*emptypb.Empty, error) {
	return t.SubmitRechargeOrderTransactionRpc_(ctx, request)
}

func (t *treasury_) SubmitRechargeOrderTransactionApi(ctx *gin.Context) {
	t.SubmitRechargeOrderTransactionApi_(ctx)
}

func (t *treasury_) CheckRechargeOrderStatus() error {
	return t.CheckRechargeOrderStatus_()
}

type ChainIOCInterface interface {
	DecodeTransaction(chainType enum.ChainType, txHash string) (bool, string, int64, string, float64, int64, error)
}

type ConfigIOCInterface interface {
	SetRpc(ctx contextx.Context, request *config_generated.SetRequest) (*emptypb.Empty, error)
	SetApi(ctx *gin.Context)
	Load() (*Configs, error)
	LoadRpc(ctx contextx.Context, request *emptypb.Empty) (*config_generated.LoadResponse, error)
	LoadApi(ctx *gin.Context)
}

type EventBusIOCInterface interface {
}

type NotifyIOCInterface interface {
	Send(url string, data any) error
}

type StorageIOCInterface interface {
	GetRedisClient() (*v9.Client, error)
	GetMysqlClient() (*gorm.DB, error)
}

type TreasuryIOCInterface interface {
	CreateRechargeOrderRpc(ctx contextx.Context, request *treasury_generated.CreateRechargeOrderRequest) (*treasury_generated.CreateRechargeOrderResponse, error)
	CreateRechargeOrderApi(ctx *gin.Context)
	SubmitRechargeOrderTransactionRpc(ctx contextx.Context, request *treasury_generated.SubmitRechargeOrderTransactionRequest) (*emptypb.Empty, error)
	SubmitRechargeOrderTransactionApi(ctx *gin.Context)
	CheckRechargeOrderStatus() error
}

var _chainSDID string

func GetChain() (*Chain, error) {
	if _chainSDID == "" {
		_chainSDID = util.GetSDIDByStructPtr(new(Chain))
	}
	i, err := normal.GetImpl(_chainSDID, nil)
	if err != nil {
		return nil, err
	}
	impl := i.(*Chain)
	return impl, nil
}

func GetChainIOCInterface() (ChainIOCInterface, error) {
	if _chainSDID == "" {
		_chainSDID = util.GetSDIDByStructPtr(new(Chain))
	}
	i, err := normal.GetImplWithProxy(_chainSDID, nil)
	if err != nil {
		return nil, err
	}
	impl := i.(ChainIOCInterface)
	return impl, nil
}

var _configSDID string

func GetConfig() (*Config, error) {
	if _configSDID == "" {
		_configSDID = util.GetSDIDByStructPtr(new(Config))
	}
	i, err := normal.GetImpl(_configSDID, nil)
	if err != nil {
		return nil, err
	}
	impl := i.(*Config)
	return impl, nil
}

func GetConfigIOCInterface() (ConfigIOCInterface, error) {
	if _configSDID == "" {
		_configSDID = util.GetSDIDByStructPtr(new(Config))
	}
	i, err := normal.GetImplWithProxy(_configSDID, nil)
	if err != nil {
		return nil, err
	}
	impl := i.(ConfigIOCInterface)
	return impl, nil
}

var _eventBusSDID string

func GetEventBusSingleton() (*EventBus, error) {
	if _eventBusSDID == "" {
		_eventBusSDID = util.GetSDIDByStructPtr(new(EventBus))
	}
	i, err := singleton.GetImpl(_eventBusSDID, nil)
	if err != nil {
		return nil, err
	}
	impl := i.(*EventBus)
	return impl, nil
}

func GetEventBusIOCInterfaceSingleton() (EventBusIOCInterface, error) {
	if _eventBusSDID == "" {
		_eventBusSDID = util.GetSDIDByStructPtr(new(EventBus))
	}
	i, err := singleton.GetImplWithProxy(_eventBusSDID, nil)
	if err != nil {
		return nil, err
	}
	impl := i.(EventBusIOCInterface)
	return impl, nil
}

type ThisEventBus struct {
}

func (t *ThisEventBus) This() EventBusIOCInterface {
	thisPtr, _ := GetEventBusIOCInterfaceSingleton()
	return thisPtr
}

var _notifySDID string

func GetNotify() (*Notify, error) {
	if _notifySDID == "" {
		_notifySDID = util.GetSDIDByStructPtr(new(Notify))
	}
	i, err := normal.GetImpl(_notifySDID, nil)
	if err != nil {
		return nil, err
	}
	impl := i.(*Notify)
	return impl, nil
}

func GetNotifyIOCInterface() (NotifyIOCInterface, error) {
	if _notifySDID == "" {
		_notifySDID = util.GetSDIDByStructPtr(new(Notify))
	}
	i, err := normal.GetImplWithProxy(_notifySDID, nil)
	if err != nil {
		return nil, err
	}
	impl := i.(NotifyIOCInterface)
	return impl, nil
}

var _storageSDID string

func GetStorage() (*Storage, error) {
	if _storageSDID == "" {
		_storageSDID = util.GetSDIDByStructPtr(new(Storage))
	}
	i, err := normal.GetImpl(_storageSDID, nil)
	if err != nil {
		return nil, err
	}
	impl := i.(*Storage)
	return impl, nil
}

func GetStorageIOCInterface() (StorageIOCInterface, error) {
	if _storageSDID == "" {
		_storageSDID = util.GetSDIDByStructPtr(new(Storage))
	}
	i, err := normal.GetImplWithProxy(_storageSDID, nil)
	if err != nil {
		return nil, err
	}
	impl := i.(StorageIOCInterface)
	return impl, nil
}

var _treasurySDID string

func GetTreasury() (*Treasury, error) {
	if _treasurySDID == "" {
		_treasurySDID = util.GetSDIDByStructPtr(new(Treasury))
	}
	i, err := normal.GetImpl(_treasurySDID, nil)
	if err != nil {
		return nil, err
	}
	impl := i.(*Treasury)
	return impl, nil
}

func GetTreasuryIOCInterface() (TreasuryIOCInterface, error) {
	if _treasurySDID == "" {
		_treasurySDID = util.GetSDIDByStructPtr(new(Treasury))
	}
	i, err := normal.GetImplWithProxy(_treasurySDID, nil)
	if err != nil {
		return nil, err
	}
	impl := i.(TreasuryIOCInterface)
	return impl, nil
}
