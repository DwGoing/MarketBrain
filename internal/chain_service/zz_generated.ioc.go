//go:build !ignore_autogenerated
// +build !ignore_autogenerated

// Code generated by iocli, run 'iocli gen' to re-generate

package chain_service

import (
	contextx "context"
	autowire "github.com/alibaba/ioc-golang/autowire"
	normal "github.com/alibaba/ioc-golang/autowire/normal"
	singleton "github.com/alibaba/ioc-golang/autowire/singleton"
	util "github.com/alibaba/ioc-golang/autowire/util"
)

func init() {
	normal.RegisterStructDescriptor(&autowire.StructDescriptor{
		Factory: func() interface{} {
			return &chainService_{}
		},
	})
	chainServiceStructDescriptor := &autowire.StructDescriptor{
		Factory: func() interface{} {
			return &ChainService{}
		},
		ConstructFunc: func(i interface{}, _ interface{}) (interface{}, error) {
			impl := i.(*ChainService)
			var constructFunc ChainServiceConstructFunc = NewChainService
			return constructFunc(impl)
		},
		Metadata: map[string]interface{}{
			"aop":      map[string]interface{}{},
			"autowire": map[string]interface{}{},
		},
	}
	singleton.RegisterStructDescriptor(chainServiceStructDescriptor)
}

type ChainServiceConstructFunc func(impl *ChainService) (*ChainService, error)
type chainService_ struct {
	GetBalance_ func(ctx contextx.Context, request *GetBalanceRequest) (*GetBalanceResponse, error)
}

func (c *chainService_) GetBalance(ctx contextx.Context, request *GetBalanceRequest) (*GetBalanceResponse, error) {
	return c.GetBalance_(ctx, request)
}

type ChainServiceIOCInterface interface {
	GetBalance(ctx contextx.Context, request *GetBalanceRequest) (*GetBalanceResponse, error)
}

var _chainServiceSDID string

func GetChainServiceSingleton() (*ChainService, error) {
	if _chainServiceSDID == "" {
		_chainServiceSDID = util.GetSDIDByStructPtr(new(ChainService))
	}
	i, err := singleton.GetImpl(_chainServiceSDID, nil)
	if err != nil {
		return nil, err
	}
	impl := i.(*ChainService)
	return impl, nil
}

func GetChainServiceIOCInterfaceSingleton() (ChainServiceIOCInterface, error) {
	if _chainServiceSDID == "" {
		_chainServiceSDID = util.GetSDIDByStructPtr(new(ChainService))
	}
	i, err := singleton.GetImplWithProxy(_chainServiceSDID, nil)
	if err != nil {
		return nil, err
	}
	impl := i.(ChainServiceIOCInterface)
	return impl, nil
}

type ThisChainService struct {
}

func (t *ThisChainService) This() ChainServiceIOCInterface {
	thisPtr, _ := GetChainServiceIOCInterfaceSingleton()
	return thisPtr
}
