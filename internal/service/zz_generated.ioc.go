//go:build !ignore_autogenerated
// +build !ignore_autogenerated

// Code generated by iocli, run 'iocli gen' to re-generate

package service

import (
	autowire "github.com/alibaba/ioc-golang/autowire"
	normal "github.com/alibaba/ioc-golang/autowire/normal"
	singleton "github.com/alibaba/ioc-golang/autowire/singleton"
	util "github.com/alibaba/ioc-golang/autowire/util"
)

func init() {
	normal.RegisterStructDescriptor(&autowire.StructDescriptor{
		Factory: func() interface{} {
			return &funds_{}
		},
	})
	fundsStructDescriptor := &autowire.StructDescriptor{
		Factory: func() interface{} {
			return &Funds{}
		},
		ConstructFunc: func(i interface{}, _ interface{}) (interface{}, error) {
			impl := i.(*Funds)
			var constructFunc FundsConstructFunc = NewFunds
			return constructFunc(impl)
		},
		Metadata: map[string]interface{}{
			"aop":      map[string]interface{}{},
			"autowire": map[string]interface{}{},
		},
	}
	singleton.RegisterStructDescriptor(fundsStructDescriptor)
}

type FundsConstructFunc func(impl *Funds) (*Funds, error)
type funds_ struct {
}

type FundsIOCInterface interface {
}

var _fundsSDID string

func GetFundsSingleton() (*Funds, error) {
	if _fundsSDID == "" {
		_fundsSDID = util.GetSDIDByStructPtr(new(Funds))
	}
	i, err := singleton.GetImpl(_fundsSDID, nil)
	if err != nil {
		return nil, err
	}
	impl := i.(*Funds)
	return impl, nil
}

func GetFundsIOCInterfaceSingleton() (FundsIOCInterface, error) {
	if _fundsSDID == "" {
		_fundsSDID = util.GetSDIDByStructPtr(new(Funds))
	}
	i, err := singleton.GetImplWithProxy(_fundsSDID, nil)
	if err != nil {
		return nil, err
	}
	impl := i.(FundsIOCInterface)
	return impl, nil
}

type ThisFunds struct {
}

func (t *ThisFunds) This() FundsIOCInterface {
	thisPtr, _ := GetFundsIOCInterfaceSingleton()
	return thisPtr
}
