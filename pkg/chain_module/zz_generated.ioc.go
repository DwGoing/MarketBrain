//go:build !ignore_autogenerated
// +build !ignore_autogenerated

// Code generated by iocli, run 'iocli gen' to re-generate

package chain_module

import (
	"crypto/ecdsa"
	"funds-system/pkg/hd_wallet"
	autowire "github.com/alibaba/ioc-golang/autowire"
	normal "github.com/alibaba/ioc-golang/autowire/normal"
	singleton "github.com/alibaba/ioc-golang/autowire/singleton"
	util "github.com/alibaba/ioc-golang/autowire/util"
	"math/big"
)

func init() {
	normal.RegisterStructDescriptor(&autowire.StructDescriptor{
		Factory: func() interface{} {
			return &chainModule_{}
		},
	})
	chainModuleStructDescriptor := &autowire.StructDescriptor{
		Factory: func() interface{} {
			return &ChainModule{}
		},
		ConstructFunc: func(i interface{}, _ interface{}) (interface{}, error) {
			impl := i.(*ChainModule)
			var constructFunc ChainModuleConstructFunc = NewChainModule
			return constructFunc(impl)
		},
		Metadata: map[string]interface{}{
			"aop":      map[string]interface{}{},
			"autowire": map[string]interface{}{},
		},
	}
	singleton.RegisterStructDescriptor(chainModuleStructDescriptor)
}

type ChainModuleConstructFunc func(impl *ChainModule) (*ChainModule, error)
type chainModule_ struct {
	GetDecimals_    func(token string) (uint8, error)
	GetHDWallet_    func(mnemonic string, password string) (*hd_wallet.HDWallet, error)
	ConvertValue_   func(token string, value *big.Float) (*big.Int, error)
	UnconvertValue_ func(token string, value *big.Int) (*big.Float, error)
	GetBalance_     func(address string, token string) (*big.Int, error)
	GetGasPrice_    func() (*big.Int, error)
	Transfer_       func(privateKey *ecdsa.PrivateKey, to string, token string, amount *big.Int) error
}

func (c *chainModule_) GetDecimals(token string) (uint8, error) {
	return c.GetDecimals_(token)
}

func (c *chainModule_) GetHDWallet(mnemonic string, password string) (*hd_wallet.HDWallet, error) {
	return c.GetHDWallet_(mnemonic, password)
}

func (c *chainModule_) ConvertValue(token string, value *big.Float) (*big.Int, error) {
	return c.ConvertValue_(token, value)
}

func (c *chainModule_) UnconvertValue(token string, value *big.Int) (*big.Float, error) {
	return c.UnconvertValue_(token, value)
}

func (c *chainModule_) GetBalance(address string, token string) (*big.Int, error) {
	return c.GetBalance_(address, token)
}

func (c *chainModule_) GetGasPrice() (*big.Int, error) {
	return c.GetGasPrice_()
}

func (c *chainModule_) Transfer(privateKey *ecdsa.PrivateKey, to string, token string, amount *big.Int) error {
	return c.Transfer_(privateKey, to, token, amount)
}

type ChainModuleIOCInterface interface {
	GetDecimals(token string) (uint8, error)
	GetHDWallet(mnemonic string, password string) (*hd_wallet.HDWallet, error)
	ConvertValue(token string, value *big.Float) (*big.Int, error)
	UnconvertValue(token string, value *big.Int) (*big.Float, error)
	GetBalance(address string, token string) (*big.Int, error)
	GetGasPrice() (*big.Int, error)
	Transfer(privateKey *ecdsa.PrivateKey, to string, token string, amount *big.Int) error
}

var _chainModuleSDID string

func GetChainModuleSingleton() (*ChainModule, error) {
	if _chainModuleSDID == "" {
		_chainModuleSDID = util.GetSDIDByStructPtr(new(ChainModule))
	}
	i, err := singleton.GetImpl(_chainModuleSDID, nil)
	if err != nil {
		return nil, err
	}
	impl := i.(*ChainModule)
	return impl, nil
}

func GetChainModuleIOCInterfaceSingleton() (ChainModuleIOCInterface, error) {
	if _chainModuleSDID == "" {
		_chainModuleSDID = util.GetSDIDByStructPtr(new(ChainModule))
	}
	i, err := singleton.GetImplWithProxy(_chainModuleSDID, nil)
	if err != nil {
		return nil, err
	}
	impl := i.(ChainModuleIOCInterface)
	return impl, nil
}

type ThisChainModule struct {
}

func (t *ThisChainModule) This() ChainModuleIOCInterface {
	thisPtr, _ := GetChainModuleIOCInterfaceSingleton()
	return thisPtr
}
