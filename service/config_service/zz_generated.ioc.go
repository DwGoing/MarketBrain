//go:build !ignore_autogenerated
// +build !ignore_autogenerated

// Code generated by iocli, run 'iocli gen' to re-generate

package config_service

import (
	contextx "context"
	autowire "github.com/alibaba/ioc-golang/autowire"
	normal "github.com/alibaba/ioc-golang/autowire/normal"
	singleton "github.com/alibaba/ioc-golang/autowire/singleton"
	util "github.com/alibaba/ioc-golang/autowire/util"
	"google.golang.org/protobuf/types/known/emptypb"
)

func init() {
	normal.RegisterStructDescriptor(&autowire.StructDescriptor{
		Factory: func() interface{} {
			return &configService_{}
		},
	})
	configServiceStructDescriptor := &autowire.StructDescriptor{
		Factory: func() interface{} {
			return &ConfigService{}
		},
		ConstructFunc: func(i interface{}, _ interface{}) (interface{}, error) {
			impl := i.(*ConfigService)
			var constructFunc ConfigServiceConstructFunc = NewConfigService
			return constructFunc(impl)
		},
		Metadata: map[string]interface{}{
			"aop":      map[string]interface{}{},
			"autowire": map[string]interface{}{},
		},
	}
	singleton.RegisterStructDescriptor(configServiceStructDescriptor)
}

type ConfigServiceConstructFunc func(impl *ConfigService) (*ConfigService, error)
type configService_ struct {
	Load_ func(ctx contextx.Context, request *emptypb.Empty) (*LoadResponse, error)
	Set_  func(ctx contextx.Context, request *SetRequest) (*emptypb.Empty, error)
}

func (c *configService_) Load(ctx contextx.Context, request *emptypb.Empty) (*LoadResponse, error) {
	return c.Load_(ctx, request)
}

func (c *configService_) Set(ctx contextx.Context, request *SetRequest) (*emptypb.Empty, error) {
	return c.Set_(ctx, request)
}

type ConfigServiceIOCInterface interface {
	Load(ctx contextx.Context, request *emptypb.Empty) (*LoadResponse, error)
	Set(ctx contextx.Context, request *SetRequest) (*emptypb.Empty, error)
}

var _configServiceSDID string

func GetConfigServiceSingleton() (*ConfigService, error) {
	if _configServiceSDID == "" {
		_configServiceSDID = util.GetSDIDByStructPtr(new(ConfigService))
	}
	i, err := singleton.GetImpl(_configServiceSDID, nil)
	if err != nil {
		return nil, err
	}
	impl := i.(*ConfigService)
	return impl, nil
}

func GetConfigServiceIOCInterfaceSingleton() (ConfigServiceIOCInterface, error) {
	if _configServiceSDID == "" {
		_configServiceSDID = util.GetSDIDByStructPtr(new(ConfigService))
	}
	i, err := singleton.GetImplWithProxy(_configServiceSDID, nil)
	if err != nil {
		return nil, err
	}
	impl := i.(ConfigServiceIOCInterface)
	return impl, nil
}

type ThisConfigService struct {
}

func (t *ThisConfigService) This() ConfigServiceIOCInterface {
	thisPtr, _ := GetConfigServiceIOCInterfaceSingleton()
	return thisPtr
}
